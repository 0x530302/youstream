#!/bin/bash
# 
# Copyright (c) 2012 Dominik Meissner <dome@code-breaker.de>
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the
# disclaimer below) provided that the following conditions are met:
# 
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
# 
#  * Neither the name of youstream nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
# 
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Command of your Video Player
COMMAND="vlc --play-and-pause --quiet --qt-minimal-view"

# Wait until PERCENTAGE percent of the video is downloaded
PERCENTAGE=10

function tidy_up() {
	if [[ -n $pid && $(ps -p${pid} | wc -l) -eq 2 ]]; then
		kill $pid
	fi
	if [[ -n $tmp ]]; then
		rm $tmp
	fi
}
function bashtrap() {
	echo
	echo "Tidying up..."
	tidy_up
	exit 1
}
trap bashtrap INT
function print_usage() {
	echo Usage: $0 [options] url [url...] 1>&2
}
function print_help() {
	print_usage
cat <<EOF 1>&2

Options:
   -h, --help               print this help text and exit
   -v, --version            print program version and exit
   -f, --format FORMAT      video format code
EOF
}
function print_version() {
	echo "youstream r7_2012-04-20" 1>&2
}
function progress_bar() {
	WIDTH=$(($(tput cols) - 8))
	echo -ne "\r[" 1>&2
	for i in $(seq 1 $(($WIDTH*$1/100))); do
		echo -n "=" 1>&2
	done
	if [[ $(($WIDTH*$1/100)) -ne $(($WIDTH)) ]]; then
		for i in $(seq $(($WIDTH*$1/100)) $(($WIDTH))); do
			echo -n " " 1>&2
		done
	fi
	printf "] %3d%%\033[5D" $1 1>&2
}

for arg; do
    delim=""
    case "$arg" in
       --help) args="${args}-h ";;
       --version) args="${args}-v ";;
       --format) args="${args}-f ";;
       #pass through anything else
       *) [[ "${arg:0:1}" == "-" ]] || delim="\""
           args="${args}${delim}${arg}${delim} ";;
    esac
done
 
eval set -- $args
 
while getopts ":f:hv" option 2>/dev/null
do
    case $option in
        h)
			print_help
			exit 0
			;;
        v)
			print_version
			exit 0
			;;
        f)
			FORMAT=${OPTARG[@]};;
        *) echo $OPTARG is an unrecognized option;;
    esac
done
shift $(($OPTIND - 1))

if [[ -n $1 ]]; then
	for i in $(seq 1 $#); do
		if [[ ${!i:0:1} = "-" ]]; then
			continue
		fi
		echo "Process ${!i}"
		
		# is a youtube link?
		youtube-dl -q -g ${!i} 2> /dev/null 1> /dev/null
		if [[ $? -ne 0 ]]; then
			links=$(curl -s ${!i} | grep 'youtube.com' | grep  'https\?://[^"]' | sed -e 'sn.*"\(https\?://\)n\1ng' -e 's/".*//g')
		else
			links=${!i}
		fi

		for vid in $links; do
			echo "Found Video: $vid"
			if [[ -z $FORMAT ]]; then
				youtube-dl -q -F $vid
				if [[ $? -ne 0 ]]; then 
					continue
				fi
				echo -n "Choose format: "
				read format foo
			else
				format=$FORMAT
			fi

			tmp=$(mktemp youstream.XXXXXXXXXX)
			size=$(curl -s -I $(youtube-dl -q -g -f $format $vid) | grep -e "Content-Length:" | sed  -e 's/[^0-9]*//g')
			echo "Link: $(curl -s -I $(youtube-dl -q -g -f $format $vid))"
			echo "Size: $size"
			youtube-dl -q --no-part -f $format -o $tmp $vid &
			pid=$!

			started=0
			while [ true ]; do
				if [[ -f $tmp ]]; then
					echo "Streaming video..."
					while [ $(( ($(stat -c %s $tmp) * 100) / $size)) -lt $PERCENTAGE ]; do
						progress_bar $(( ($(stat -c %s $tmp) * 100) / $size))
						sleep 1
					done
					if [[ $started -eq 0 ]]; then
						started=1
						$COMMAND $tmp 1>/dev/null 2>/dev/null &
					fi
					while [ $(( ($(stat -c %s $tmp) * 100) / $size)) -lt 100 ]; do
						progress_bar $(( ($(stat -c %s $tmp) * 100) / $size))
						sleep 1
					done
					echo
					break
				else
					sleep 1
				fi
			done
			
			echo -n "Delete video ? [Y/n] "
			read answer foo
			case "$answer" in
				[Nn])
					echo "Video is saved in $tmp" ;;
				*)
					tidy_up
					;;
			esac
		done
	done
	echo
else
	print_usage
	exit 1
fi
